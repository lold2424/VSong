name: VSong Deploy to OCI

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build Frontend
        working-directory: ./src/front
        run: |
          npm install
          npm run build

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Backend with Gradle
        run: ./gradlew build

      - name: Deploy Application
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DRIVER_CLASS_NAME: ${{ secrets.DB_DRIVER_CLASS_NAME }}
          YOUTUBE_API_KEYS: ${{ secrets.YOUTUBE_API_KEYS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          BASE_URL: ${{ secrets.BASE_URL }}
        run: |
          echo "Starting deployment..."

          # 1. 기존 백엔드 프로세스 종료
          pkill -f 'VSong' || true
          sleep 5

          # 2. 프론트엔드 파일 배포
          sudo rm -rf /var/www/v-song/*
          sudo cp -R ./src/front/build/* /var/www/v-song/

          # 3. GitHub Secrets와 기타 설정으로 application.properties 파일 생성
          PROPERTIES_FILE="/home/ubuntu/app/application.properties"
          echo "Creating $PROPERTIES_FILE..."
          # --- Database Configuration ---
          echo "spring.datasource.url=$DB_URL" > $PROPERTIES_FILE
          echo "spring.datasource.username=$DB_USERNAME" >> $PROPERTIES_FILE
          echo "spring.datasource.password=$DB_PASSWORD" >> $PROPERTIES_FILE
          echo "spring.datasource.driver-class-name=$DB_DRIVER_CLASS_NAME" >> $PROPERTIES_FILE
          # --- YouTube API Keys ---
          echo "youtube.api.keys=$YOUTUBE_API_KEYS" >> $PROPERTIES_FILE
          # --- Google OAuth2 Configuration ---
          echo "spring.security.oauth2.client.registration.google.client-id=$GOOGLE_CLIENT_ID" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.registration.google.client-secret=$GOOGLE_CLIENT_SECRET" >> $PROPERTIES_FILE
          echo "baseUrl=$BASE_URL" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.registration.google.scope=profile,email,https://www.googleapis.com/auth/youtube.readonly" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.registration.google.redirect-uri=\${baseUrl}/login/oauth2/code/google" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.registration.google.client-name=Google" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo" >> $PROPERTIES_FILE
          echo "spring.security.oauth2.client.provider.google.user-name-attribute=sub" >> $PROPERTIES_FILE
          # --- Other Configurations ---
          echo "server.port=8080" >> $PROPERTIES_FILE
          echo "spring.jpa.hibernate.ddl-auto=update" >> $PROPERTIES_FILE
          echo "spring.jackson.time-zone=Asia/Seoul" >> $PROPERTIES_FILE
          echo "spring.task.scheduling.enabled=true" >> $PROPERTIES_FILE

          # 4. 백엔드 .jar 파일 배포
          JAR_FILE=$(find ./build/libs/ -name "*.jar" ! -name "*-plain.jar")
          echo "Deploying $JAR_FILE..."
          cp $JAR_FILE /home/ubuntu/app/app.jar

          # 5. 새 애플리케이션 실행
          cd /home/ubuntu/app
          nohup java -jar app.jar > app.log 2>&1 &

          echo "Deployment finished."
